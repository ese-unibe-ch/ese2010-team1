h1. Built-in template tags 

These are the standard tags built in the template engine.

p(note). There is a separate "Java extensions":javaextensions manual page.


h2. <a>a</a>

The **a** tag inserts an HTML link to a controller action.

bc. #{a @Application.logout()}Disconnect#{/a}

Rendered as:

bc. <a href="/application/logout">Disconnect</a>

If the action you try call does not have any route able to invoke it using a GET method, Play will automatically generate a hidden form that will be submitted on link click using JavaScript.


h2. <a>doLayout</a>

Used with template inheritance, this tag insert the evaluated sub-template’s contents.

bc. <!-- common header here -->
<div id="content">
    #{doLayout /}
</div>
<!-- common footer here -->


h2. <a>else</a>

Of course used with the **if** tag.

bc. #{if user}
    Connected user is ${user}
#{/if}
#{else}
    Please log in
#{/else}

However, you can also use it with the **list** tag and it will be executed if the list was empty.

bc. #{list items:task, as:'task'}
    <li>${task}</li>
#{/li}
 
#{else}
    Nothing to do...
#{/else}


h2. <a>elseif</a>

bc. #{if tasks.size() > 1}
    Busy tasklist
#{/if}
 
#{elseif tasks}
    One task on the list
#{/elseif}
 
#{else}
    Nothing to do
#{/else}

As for **else**, you can use it with the **list** tag.


h2. <a>errors</a>

Iterates over the current validation errors.

bc. <ul>
#{errors}
    <li>${error}</li>
#{/errors}
</ul>

The tag defines implicit variables in its body.

* **error_index**, the error’s index, starting at 1
* **error_isLast**, true for the last element
* **error_isFirst**, true for the first element
* **error_parity**, alternates between **odd** and **even**

bc. <table>
<tr><th>#</th><th>Error</th></tr>
#{errors}
    <tr class="${error_parity}"><td>${error_index}</td><td>${error}</td></tr>
#{/errors}
</table>


h2. <a>extends</a>

Makes the template inherit another template.

bc. #{extends 'main.html' /}


h2. <a>field</a>

The field tag is an helper, based on the spirit of the Don’t Repeat Yourself. It works this way:

Instead of writing this:

bc. <p>
  <label>&{'user.name'}</label>
  <input type="text" id="user_name" name="user.name" value="${user?.name}" class="${errors.forKey('user.name') ? 'has_error' : ''}">
  <span class="error">${errors.forKey('user.name')}</span>
</p>

You can just write:

bc. #{field 'user.name'}
<p>
  <label>&{field.name}</label>
  <input type="text" id="${field.id}" name="${field.name}" value="${field.value}" class="${field.errorClass}">
  <span class="error">${field.error}</span>
</p>
#{/}

So you don’t repeat **user.name** again and again.


h2. <a>form</a>

Inserts a **form** tag. The HTTP method is guessed from the route, and defaults to POST. If there are both GET and POST routes configured for the URL, the tag will default to using the first route defined in routes.  

* Optional **id** attribute sets an ID to the form element. 
* Optional **enctype** attribute sets the form’s data encoding. it defaults to ‘application/x-www-form-urlencoded’.

Charset encoding is always ‘utf-8’.

bc. #{form @Client.create() , id:'creationForm' enctype:'multipart/form-data' }
   ...
#{/form}


Rendered as:

bc. <form action="/client/create" id="frm" method="POST" accept-charset="utf-8" enctype="multipart/form-data">
 ...
</form>


h2. <a>get</a>

Retrieves a value defined with a **set** tag. You may use  the get/set mechanism to exchange values between templates, layouts and sub-templates.

bc. <head>
    <title>#{get 'title' /}
</head>

You can also use the get tag in the following way, which will display "Homepage" if title has not been specified.

bc. <head>
    <title>#{get 'title'}Homepage #{/} 
</head>


h2. <a>i18n</a>

Exports localized messages in JavaScript. Localized messages are available from your JavaScript code using the **i18n()** function.

Define your translations in the **conf/messages** file.

bc. hello_world=Hello, World !
hello_someone=Hello %s !

Include the messages in your template (or layout) page:

bc. #{i18n /}

And retrieve keys from JavaScript:

bc. alert(i18n('hello_world'));
alert(i18n('hello_someone', 'John'));


h2. <a>if</a>

Evaluates the given test, and if true, evaluates the tag body.

bc. #{if user.countryCode == 'en"' }
    Connected user is ${user}
#{/if}

Using composite conditions:

bc. #{if ( request.actionMethod == 'administer'  && user.isAdmin() ) }
    You are admin, allowed to administer.
#{/if}


h2. <a>ifnot</a>

Cleaner alternative to #{if !condition}

bc. #{ifnot tasks}
    No tasks today
#{/ifnot}


h2. <a>include</a>

Includes another template. All of the current template’s variables are directly available in the included template.

bc. <div id="tree">
    #{include 'tree.html' /}
</div>


h2. <a>jsAction</a>

The #{jsAction /} tag returns a JavaScript function which constructs a URL based on a server action and free variables. It does not perform an AJAX request; these have to be done by hand using the returned URL.

Let’s see an example:

bc. GET     /users/{id}        Users.show

Now you can import this route client side:

bc. <script type="text/javascript">
    var showUserAction = #{jsAction @Users.show(':id') /}
    
    var displayUserDetail = function(userId) {
        $('userDetail').load( showUserAction({id: userId}) )
    }
</script>


h2. <a>list</a>

Iterates over an object collection.

bc. <ul>
#{list items:products, as:'product'}
    <li>${product}</li>
#{/list}
</ul>

The tag defines implicit variables in its body. The variable names are prefixed with the loop variable name.

* **name_index**, the item’s index, starting at 1
* **name_isLast**, true for the last element
* **name_isFirst**, true for the first element
* **name_parity**, alternates between **odd** and **even**

bc. <ul>
#{list items:products, as:'product'}
    <span class="${product_parity}">${product_index}. ${product}</span>
    ${product_isLast ? '' : '-'}
#{/list}
</ul>

The **items** parameter is optional and can be replaced by the default **arg** argument.

So you can rewrite:

bc. #{list items:users, as:'user'}
    <li>${user}</li>
#{/list}

as:

bc. #{list users, as:'user'}
    <li>${user}</li>
#{/list}

**for** loops are easy to create using Groovy **range** object:

bc. #{list items:0..10, as:'i'}
    ${i}
#{/list}

bc. #{list items:'a'..'z', as:'letter'}
    ${letter} ${letter_isLast ? '' : '|' }
#{/list}

The **as** parameter is optional as well. It uses **_** as default variable name:

bc. #{list users}
    <li>${_}</li>
#{/list}


h2. <a>script</a>

Inserts a **script** tag in the template. By convention, the tag refers to a script in **/public/javascripts**

* **src** (required) - script file name, without the leading path **/public/javascripts**
* **id** (optional) - an **id** attribute value for the generated **script** tag
* **charset** (optional) - sets source encoding - defaults to UTF-8

The **src** parameter can be replaced by the default **arg** argument.

bc. #{script 'jquery-1.4.2.min.js' /}
#{script id:'datepicker' , src:'ui/ui.datepicker.js', charset:'utf-8' /}


h2. <a>set</a>

Define a value which can be retrieve in the same template or any layout with the **get** tag.

bc. #{set title:'Admin' /}
#{set style:'2columns' /}

You can also use variables:

bc. #{set title:'Profile of ' + user.login /}

You can define variables value in the body:

bc. #{set 'title'}
    Profile of ${user.login}
#{/set}


h2. <a>stylesheet</a>

Inserts a **link** tag in the template. By convention, the tag refers to a CSS file in **/public/javascripts**

* **src** (required) - file name, without the leading path **/public/stylesheets**
* **id** (optional) - an **id** attribute value for the generated **link** tag
* **media** (optional) - a **media** attribute value: screen, print, aural, projection…
* **title** (optional) - **title** atttribute value (or description)

The **src** parameter can be replaced by the default **arg** argument.

bc. #{stylesheet 'default.css' /}
#{stylesheet id:'main', media:'print', src:'print.css', title:'Print stylesheet' /}


h2. <a>verbatim</a>

Disables HTML escaping in template output, like the "raw()":javaextensions#arawa Java extension, but for the whole tag body.

bc. ${'&amp;'}
#{verbatim}${'&amp;'}#{/verbatim}

In this example, the first line outputs **&amp;** while the second line outputs an ampersand. 

